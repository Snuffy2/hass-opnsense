name: Tests and Coverage

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  pytest:
    name: pytest and coverage report
    runs-on: ubuntu-latest

    env:
      # Ensure coverage writes to a run-unique file so parallel/segmented runs
      # (or future matrix jobs) won't clobber each other. This name is also
      # uploaded as an artifact for later combination if needed.
      COVERAGE_FILE: .coverage.${{ github.run_id }}.${{ github.job }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5.0.0

      - name: Set up Python 3
        uses: actions/setup-python@v5.6.0
        with:
          python-version: 3.x

      - name: Cache pip dependencies
        uses: actions/cache@v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt', 'requirements.txt', 'pyproject.toml', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: python -m pip install --upgrade pip && pip install -r requirements-dev.txt

      - name: Run pytest with Coverage
        continue-on-error: true
        run: pytest

      - name: Check coverage file exists
        id: check_coverage_file
        run: |
          if [ -f "${{ env.COVERAGE_FILE }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage data artifact
        if: steps.check_coverage_file.outputs.exists == 'true'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: coverage-data-${{ github.run_id }}-${{ github.job }}
          path: ${{ env.COVERAGE_FILE }}

      - name: Check htmlcov exists
        id: check_htmlcov
        run: |
          if [ -d "htmlcov" ] && [ -f "htmlcov/index.html" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload HTML Coverage Report
        # if: ${{ github.event_name == 'workflow_dispatch' }}
        if: steps.check_htmlcov.outputs.exists == 'true'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: coverage-html
          path: htmlcov/

      - name: Check pytest junit xml exists
        id: check_pytest_xml
        run: |
          if [ -f "pytest.xml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload pytest junit xml
        if: steps.check_pytest_xml.outputs.exists == 'true'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: pytest-xml-${{ github.run_id }}-${{ github.job }}
          path: pytest.xml

  coverage-merge:
    name: Combine coverage artifacts and publish reports
    # allow this job to post PR comments and upload final artifacts
    permissions:
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Set up Python 3
        uses: actions/setup-python@v5.6.0
        with:
          python-version: 3.x

      - name: Install coverage
        run: python -m pip install --upgrade pip && pip install coverage

      - name: Download coverage artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          path: coverage_artifacts

      - name: Copy coverage files to workspace
        run: |
          # Find any coverage files under the downloaded artifacts and copy them
          # into the workspace root so `coverage combine` can find them.
          shopt -s globstar || true
          find coverage_artifacts -type f -name '.coverage*' -exec cp {} . \; || true
          # Copy any pytest junit xml files so the comment action can reference them
          find coverage_artifacts -type f -name 'pytest.xml' -exec cp {} . \; || true
          # Debug: list copied files for easier troubleshooting in CI logs
          echo "--- coverage_artifacts/ listing ---"
          ls -la coverage_artifacts || true
          echo "--- workspace root listing ---"
          ls -la . || true

      - name: Combine coverage and generate reports
        run: |
          # Combine any found .coverage.* files into a single .coverage
          python -m coverage combine || true
          python -m coverage xml -o coverage.xml
          python -m coverage html -d htmlcov
          python -m coverage report

      - name: Check combined coverage.xml exists
        id: check_coverage_xml
        run: |
          if [ -f "coverage.xml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Show combined Coverage in PR
        if: ${{ github.event_name == 'pull_request' && steps.check_coverage_xml.outputs.exists == 'true' }}
        # uses: MishaKav/pytest-coverage-comment@main
        uses: eltoder/pytest-coverage-comment@feature/branch-coverage
        with:
          pytest-xml-coverage-path: ./coverage.xml
          junitxml-path: ./pytest.xml
          remove-link-from-badge: true
          badge-title: Branch Coverage
