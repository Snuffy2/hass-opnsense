name: Update Version and Create Zip on Release
on:
  workflow_dispatch:
  release:
    types: [published, edited]

jobs:
  update_version_and_create_zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0
      - name: Debug Variables
        run: |
            echo "github.event_name: ${{ github.event_name }}"
            echo "github.ref_name: ${{ github.ref_name }}"
            echo "github.event.repository.default_branch: ${{ github.event.repository.default_branch }}"
            echo "github.event.release.target_commitish: ${{ github.event.release.target_commitish }}"
            echo "github.event.release.prerelease: ${{ github.event.release.prerelease }}"
            echo "github.event.release.draft: ${{ github.event.release.draft }}"      
      - name: Update Version in Manifest
        if: ${{ github.event_name == 'release' && github.event.release.draft == false }}
        run: |
          sed -i 's/\"version\"\s*\:\s*\".*\"/\"version\"\:\"${{ github.ref_name }}\"/g' ./custom_components/opnsense/manifest.json
      - name: Update Version in const.py
        if: ${{ github.event_name == 'release' && github.event.release.draft == false }}
        run: |
          sed -i 's/VERSION \= \".*\"/VERSION \= \"${{ github.ref_name }}\"/' ./custom_components/opnsense/const.py
      - name: Update Changelog
        if: ${{ github.event_name == 'release' && github.event.release.draft == false && github.event.release.prerelease == false  }}
        uses: rhysd/changelog-from-release/action@v3
        with:
          file: CHANGELOG.md
          github_token: ${{ secrets.GITHUB_TOKEN }}
          commit: false        
      - name: Commit & Push Version Changes
        if: ${{ github.event_name == 'release' && github.event.release.draft == false && github.event.release.prerelease == false  }}
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.release.target_commitish }}
          message: 'Updating to version ${{ github.ref_name }}'

      - name: Extract variables from const.py
        if: ${{ github.event_name == 'release' && github.event.release.draft == false }}
        id: extract_variables
        run: |
          # Extract the variables from /custom_components/opnsense/const.py using grep
          OPNSENSE_LTD_FIRMWARE=$(grep 'OPNSENSE_LTD_FIRMWARE' custom_components/opnsense/const.py | cut -d '"' -f2)
          OPNSENSE_MIN_FIRMWARE=$(grep 'OPNSENSE_MIN_FIRMWARE' custom_components/opnsense/const.py | cut -d '"' -f2)
          echo "OPNSENSE_LTD_FIRMWARE=$OPNSENSE_LTD_FIRMWARE" >> $GITHUB_ENV
          echo "OPNSENSE_MIN_FIRMWARE=$OPNSENSE_MIN_FIRMWARE" >> $GITHUB_ENV

      - name: Get the current release ID
        if: ${{ github.event_name == 'release' && github.event.release.draft == false }}
        id: get_release
        run: |
          # Fetch release info and print for debugging
          gh release view --json id,tagName,title,draft,body
          RELEASE_ID=$(gh release view --json id -q ".id")
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
          echo "Release ID: $RELEASE_ID"  # Debugging: check if the release ID is correct
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update release notes with firmware information
        if: ${{ github.event_name == 'release' && github.event.release.draft == false }}
        run: |
          gh release edit $RELEASE_ID \
          --notes "### OPNsense Minimum Firmware Required: ${{ env.OPNSENSE_MIN_FIRMWARE }}\n\n_For firmware versions below the minimum version, the integration will not permit new installations and existing installations will no longer start._\n\n### OPNsense Recommended Firmware: ${{ env.OPNSENSE_LTD_FIRMWARE }}\n\n_Firmware versions below the recommended version will likely work but may have limited features and/or show errors in the logs._\n\n$(gh release view --json body -q .body)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      - name: Create Zip
        uses: thedoctor0/zip-release@0.7.6
        with:
          type: 'zip'
          filename: 'opnsense.zip'
          directory: ./custom_components/opnsense
      - name: Upload Zip to Release
        if: ${{ github.event_name == 'release' && github.event.release.draft == false }}
        uses: Roang-zero1/github-upload-release-artifacts-action@v3.0.0
        with:
          args: ./custom_components/opnsense/opnsense.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Add Zip to Action
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: opnsense
          path: ./custom_components/opnsense/opnsense.zip
          if-no-files-found: error
